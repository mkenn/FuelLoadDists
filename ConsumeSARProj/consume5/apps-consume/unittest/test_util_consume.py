#This file was originally generated by PyScripter's unitest wizard

import unittest
import consume.util_consume as util
import numpy as np

class TestGlobalFunctions(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testunit_conversion(self):
        def cvt_help(data_in, u_from, u_to):
            return util.unit_conversion(data_in.copy(), 1, u_from, u_to)[1]

        '''
        undict = {'tons_ac' : 1,
                  'lbs_ac' : 0.0005,
                  'lbs' : 0.0005,
                  'kg' : 0.00110231131,
                  'kg_ha' : 0.0004460891,
                  'kg_m^2' : 4.46089561,
                  'kg_km^2' : 0.000004460891,
                  'tonnes' : 1.10231131,
                  'tonnes_ha' : 0.446089561,
                  'tonnes_km^2' : 0.00446089561}
        '''

        data = np.array([1.,99.,1001.,123498.])
        ### - do all tons_ac to other units, once case back to tons_ac,
        ###   and one from different unit to another different unit
        self.assertTrue(np.all(data.copy() * 2000 == cvt_help(data, 'tons_ac', 'lbs_ac')))
        self.assertTrue(np.all(data.copy() * 2000 == cvt_help(data, 'tons_ac', 'lbs')))
        self.assertTrue(np.allclose(data.copy() * 907.185, cvt_help(data, 'tons_ac', 'kg')))
        self.assertTrue(np.allclose(data.copy(), cvt_help(data.copy() * 907.185, 'kg', 'tons_ac')))
        self.assertTrue(np.allclose(data.copy() * 2241.70231, cvt_help(data, 'tons_ac', 'kg_ha')))
        self.assertTrue(np.allclose(data.copy() * 2.24170231, cvt_help(data.copy() * 2241.70231, 'kg_ha', 'tonnes_ha')))

        self.assertTrue(np.allclose(data.copy() * .224170231, cvt_help(data, 'tons_ac', 'kg_m^2')))
        self.assertTrue(np.allclose(data.copy() * 224170.231, cvt_help(data, 'tons_ac', 'kg_km^2')))
        self.assertTrue(np.allclose(data.copy() * 0.907185, cvt_help(data, 'tons_ac', 'tonnes')))
        self.assertTrue(np.allclose(data.copy() * 2.24170231, cvt_help(data, 'tons_ac', 'tonnes_ha')))
        self.assertTrue(np.allclose(data.copy() * 224.170231, cvt_help(data, 'tons_ac', 'tonnes_km^2')))

    def testget_consume_version(self):
        pass

    def testget_version(self):
        pass

    def testget_version_short(self):
        pass

if __name__ == '__main__':
    unittest.main()
